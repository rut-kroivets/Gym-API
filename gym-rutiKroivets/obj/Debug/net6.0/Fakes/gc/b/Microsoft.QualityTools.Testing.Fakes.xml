<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.QualityTools.Testing.Fakes</name>
    </assembly>
    <members>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Engine.RuntimeDelegateTypePool">
            <summary>
            A queryable collection of delegate types
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Engine.RuntimeDelegateTypePool.#ctor">
            <summary>
            Instantiates a new pool
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Engine.RuntimeDelegateTypePool.AddDelegate(System.Type)">
            <summary>
            Adds the delegate.
            </summary>
            <param name="td">The td.</param>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Engine.RuntimeDelegateTypePool.AddInvokeMethod(System.Reflection.MethodInfo)">
            <summary>
            Adds the delegate.
            </summary>
            <param name="invokeMethod">The invoke method.</param>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Engine.RuntimeDelegateTypePool.TryGetDelegateType(System.Type,System.Reflection.MethodBase,System.Boolean,System.Type@,System.Reflection.MethodInfo@)">
            <summary>
            Tries the type of the get delegate.
            </summary>
            <param name="declaringType">Type of the declaring.</param>
            <param name="method">The method.</param>
            <param name="useThisParameter">if set to <c>true</c> [use this parameter].</param>
            <param name="delegateType">Type of the delegate.</param>
            <param name="invokeDelegateMethod">The invoke delegate method.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Engine.RuntimeDelegateTypePool.AddUncurryMethod(System.Reflection.MethodInfo)">
            <summary>
            Adds a method that can be used to uncurry a method, i.e. artifically prepend a 'this' parameter
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Engine.RuntimeDelegateTypePool.TryGetUncurryMethod(System.Type,System.Type,System.Reflection.MethodInfo@)">
            <summary>
            Tries to find the helper method that can uncurry the delegate
            </summary>
            <param name="receiverType"></param>
            <param name="delegateType"></param>
            <param name="uncurryMethod"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Engine.DelegateInstantiationType">
            <summary>
            Possible return values from the delegate lookup
            </summary>
        </member>
        <member name="F:Microsoft.QualityTools.Testing.Fakes.Engine.DelegateInstantiationType.Undefined">
            <summary>
            Undefied result
            </summary>
        </member>
        <member name="F:Microsoft.QualityTools.Testing.Fakes.Engine.DelegateInstantiationType.Success">
            <summary>
            Successfully instantiated a delegate
            </summary>
        </member>
        <member name="F:Microsoft.QualityTools.Testing.Fakes.Engine.DelegateInstantiationType.NotSupported">
            <summary>
            Some parameter types are not supported
            </summary>
        </member>
        <member name="F:Microsoft.QualityTools.Testing.Fakes.Engine.DelegateInstantiationType.NotFound">
            <summary>
            The signature was not found in the list of supported delegates
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesAssemblyAttribute">
            <summary>
            Attribute that specifies that this assembly was generated by Fakes and contains shim or stub types.
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.FakesAssemblyAttribute.FakedAssemblyName">
            <summary>
            Gets or sets the faked assembly name.
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.FakesAssemblyAttribute.DisableShims">
            <summary>
            Gets or sets a value indicating whether shims can be disabled in the test run
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesAssemblyAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the attribute.
            </summary>
            <param name="fakedAssemblyName"></param>
            <param name="disabledShims"></param>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegatesTypeAttribute">
            <summary>
            Attributes that specifies a type that contains nested generic delegate types.
            This attribute is intended to suppor the Fakes infrastructure.
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesDelegatesTypeAttribute.#ctor(System.Type)">
            <summary>
            Instantiates a new instance of the attribute.
            </summary>
            <param name="holderType"></param>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.FakesDelegatesTypeAttribute.HolderType">
            <summary>
            Gets the holder type
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesFrameworkResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.FakesFrameworkResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.FakesFrameworkResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.FakesFrameworkResources.AMethodFromAMoleWasNotResolvedPleaseRegenerateTheMoles">
            <summary>
              Looks up a localized string similar to A method from a shim was not resolved. Please regenerate the .fakes file..
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.FakesFrameworkResources.CannotBeInstrumented">
            <summary>
              Looks up a localized string similar to {0}.{1} cannot be detoured.
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.FakesFrameworkResources.CannotInstantiateAbstractType">
            <summary>
              Looks up a localized string similar to cannot instantiate abstract type .
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.FakesFrameworkResources.DelegateTargetIsANullReference">
            <summary>
              Looks up a localized string similar to delegate target is a null reference.
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.FakesFrameworkResources.DetourInstrumentationProviderNotSet">
            <summary>
              Looks up a localized string similar to The UnitTestIsolation instrumentation was not properly initialized. Please ensure that your VisualStudio installation supports this feature..
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.FakesFrameworkResources.DetoursAreNotEnabled">
            <summary>
              Looks up a localized string similar to UnitTestIsolation is not enabled..
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.FakesFrameworkResources.FailedToGetFunctionAddress">
            <summary>
              Looks up a localized string similar to Failed to get address of function {0} from library &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.FakesFrameworkResources.FailedToGetProfilerModuleHandle">
            <summary>
              Looks up a localized string similar to Failed to get profiler module handle &apos;{0}&apos;. {1}.
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.FakesFrameworkResources.FailedToOpenProfilerRegistryKey">
            <summary>
              Looks up a localized string similar to Failed to open profiler registry key &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.FakesFrameworkResources.FailedToResolveProfilerPath">
            <summary>
              Looks up a localized string similar to Failed to resolve profiler path from COR_PROFILER_PATH and COR_PROFILER environment variables..
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.FakesFrameworkResources.FailedToSetDetourProvider">
            <summary>
              Looks up a localized string similar to Unexpected error returned by SetDetourProvider in profiler library &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.FakesFrameworkResources.IncompatibleMethodAndDetour">
            <summary>
              Looks up a localized string similar to incompatible method and shim.
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.FakesFrameworkResources.MethodIsAbstract">
            <summary>
              Looks up a localized string similar to method is abstract.
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.FakesFrameworkResources.MethodIsAStaticConstructor">
            <summary>
              Looks up a localized string similar to method is a static constructor.
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.FakesFrameworkResources.MethodMustBeAFullyInstantiated">
            <summary>
              Looks up a localized string similar to method must be a fully instantiated.
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.FakesFrameworkResources.MustBeAClassOrAValuetype">
            <summary>
              Looks up a localized string similar to must be a class or a valuetype.
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.FakesFrameworkResources.MustBeAFullyInstantiedMethod">
            <summary>
              Looks up a localized string similar to must not contain generic arguments.
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.FakesFrameworkResources.MustNotBeAbstract">
            <summary>
              Looks up a localized string similar to must not be abstract.
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.FakesFrameworkResources.MustNotBeExtern">
            <summary>
              Looks up a localized string similar to must not be extern.
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.FakesFrameworkResources.MustNotUseTheVarargsCallingConvention">
            <summary>
              Looks up a localized string similar to must not use the &apos;variable arguments&apos; calling convention.
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.FakesFrameworkResources.OptionalReceiverShouldBeNullForStaticMethods">
            <summary>
              Looks up a localized string similar to optionalReceiver should be null for static methods.
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.FakesFrameworkResources.ShimsContextNotCreated">
             <summary>
               Looks up a localized string similar to A ShimsContext must be in scope in order to register shims. Use the snippet below to fix your code.
            -- C#:
            using Microsoft.QualityTools.Testing.Fakes;
            
            using(ShimsContext.Create())
            {
                // your test code using Shims here
            }
            -- VisualBasic.NET
            Imports Microsoft.QualityTools.Testing.Fakes
            
            Using ShimsContext.Create
                &apos; your test code using Shims here
            End Using  
              .
             </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.FakesFrameworkResources.StaticMethodCannotBeDispatchedToInstances">
            <summary>
              Looks up a localized string similar to static method cannot be dispatched to instances.
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Instances.IInstanced">
            <summary>
            An object that holds a runtime instance, non-generic.
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.Instances.IInstanced.Instance">
            <summary>
            Gets the runtime instance
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Instances.IInstanced`1">
            <summary>
            A object that holds a runtime instance
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.Instances.IInstanced`1.Instance">
            <summary>
            Gets the runtime instance
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Instances.InstancedPool">
            <summary>
            A type that contains a map from instance to potential behaved.
            </summary>
            <remarks>
            The instances and behaved are stored as weak references.
            </remarks>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Instances.InstancedPool.Clear">
            <summary>
            Clears the map of behaved
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Instances.InstancedPool.RegisterInstanced(Microsoft.QualityTools.Testing.Fakes.Instances.IInstanced)">
            <summary>
            Registers a behaved and its instance
            </summary>
            <param name="instanced"></param>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Instances.InstancedPool.GetInstancedOrSelf(System.Object)">
            <summary>
            Gets the behaved for instance, or returns the instance itself.
            </summary>
            <param name="optionalInstance">instance may be null</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Instances.InstancedPool.TryGetInstanced``1(System.Object,``0@)">
            <summary>
            Tries to retreive the behaved for a given runtime instace
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="instanced"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Instances.InstancedPool.TryGetInstanced(System.Object,Microsoft.QualityTools.Testing.Fakes.Instances.IInstanced@)">
            <summary>
            Tries to retrieve the behaved for a given runtime instance
            </summary>
            <param name="instance"></param>
            <param name="instanced"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Instances.InstancedPool.CastAsInstance``2(``0)">
            <summary>
            Extracts the runtime type from the instanced object
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Instances.InstancedPool.CastAsInstanced``2(``0)">
            <summary>
            Tries to recover the instanced type from the runtime type
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Instances.InstancedPool.GetInstancedObjects">
            <summary>
            Gets a snapshot of the set of objects with instances
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Utils.ReflectionHelper.TryGetDeclaringType(System.Reflection.MethodBase,System.Type@)">
            <summary>
            Tries to get the method declaring type
            </summary>
            <param name="method"></param>
            <param name="declaringType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Utils.ReflectionHelper.TryGetMethod(System.Type,System.String,System.Reflection.BindingFlags,System.Type[],System.Reflection.MethodBase@)">
            <summary>
            Try to get the method
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="flags"></param>
            <param name="parameterTypes"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Utils.ReflectionHelper.GetRootDefinition(System.Reflection.MethodInfo)">
            <summary>
            Gets the base definition.
            </summary>
            <param name="methodInfo">The method info.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Utils.ReflectionHelper.GetBaseDefinition(System.Reflection.MethodInfo,System.Boolean@)">
            <summary>
            Gets the base definition.
            </summary>
            <param name="methodInfo">The method info.</param>
            <param name="wasBaseDefinitionAlready">if set to <c>true</c> [was base definition already].</param>
            <returns>never null</returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Utils.ReflectionHelper.GetBaseDefinition(System.Reflection.MethodInfo)">
            <summary>
            Gets the base definition.
            </summary>
            <param name="methodInfo">The method info.</param>
            <returns>never null</returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Utils.ReflectionHelper.RebuildMethodInfo(System.Reflection.MethodInfo)">
            <summary>
            This method rebuild a method info. 
            </summary>
            <remarks>
            This method returns an equivalent method info. 
            While principle, this method is useless, in practice, it is useful to work around reflection quirks.
            </remarks>
            <param name="methodInfo">The method info.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Utils.ReflectionHelper.GetMetadataTokenOrZero(System.Reflection.MemberInfo)">
            <summary>
            Obtains the metadata token associated with a memberInfo, or zero if the token is not available.
            </summary>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Utils.TypeSpec">
            <summary>
            Each type has a type spec.
            </summary>
            <remarks>
            This is a simplified view of type specs, compared to the ones present in the .NET meta data itself.
            </remarks>
        </member>
        <member name="F:Microsoft.QualityTools.Testing.Fakes.Utils.TypeSpec.SzArray">
            <summary>
            This type is a single-dimensional array built around an element type.
            </summary>
        </member>
        <member name="F:Microsoft.QualityTools.Testing.Fakes.Utils.TypeSpec.MdArray">
            <summary>
            This type is a multi-dimensional and/or non-zero based array built around an element type.
            </summary>
        </member>
        <member name="F:Microsoft.QualityTools.Testing.Fakes.Utils.TypeSpec.Pointer">
            <summary>
            This type is an unmanaged pointer to an element type.
            </summary>
        </member>
        <member name="F:Microsoft.QualityTools.Testing.Fakes.Utils.TypeSpec.ManagedPointer">
            <summary>
            This type is a managed pointer to an element type.
            </summary>
        </member>
        <member name="F:Microsoft.QualityTools.Testing.Fakes.Utils.TypeSpec.ValueType">
            <summary>
            This type is value type, or a generic instance of a value type.
            </summary>
        </member>
        <member name="F:Microsoft.QualityTools.Testing.Fakes.Utils.TypeSpec.Class">
            <summary>
            This type is class (or an interface), or a generic instance of a class (or an interface).
            </summary>
        </member>
        <member name="F:Microsoft.QualityTools.Testing.Fakes.Utils.TypeSpec.GenericParameter">
            <summary>
            This type is a type parameter of a type or method
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.ShimsContext">
            <summary>
            A class that allows to create a context that defines the lifetime of shims
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.ShimsContext.Create">
            <summary>
            Creates a context where shims are reseted when the return disposble is disposed.
            The context MUST be disposed to ensure that are cleaned up after the test.
            </summary>
            <returns>a new context</returns>
            <exception cref="T:Microsoft.QualityTools.Testing.Fakes.Shims.ShimInvalidOperationException">a context is already in scope</exception>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.ShimsContext.Reset">
            <summary>
            Clears all the current shims, instances and ShimBehaviors.
            Must be called within an active ShimsContext but keeps the context active.
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.ShimsContext.ExecuteWithoutShims(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action)">
            <summary>
            Executes an action without any moles
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.ShimsContext.ExecuteWithoutShims``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0})">
            <summary>
            Executes an action without any moles
            </summary>
            <param name="func"></param>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Shims.IShimBehavior">
            <summary>
            Defines behavior of shims
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.IShimBehavior.TryGetShimMethod(System.Reflection.MethodBase,System.Delegate@)">
            <summary>
            Tries to get the shim delegate.
            </summary>
            <param name="method">The method.</param>
            <param name="shim">The shim delegate.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Shims.ShimBase">
            <summary>
            Base class for all shim implementations
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimBase.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.QualityTools.Testing.Fakes.Shims.ShimBase"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.Shims.ShimBase.TargetType">
            <summary>
            Gets the type of the target.
            </summary>
            <value>The type of the target.</value>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Shims.ShimBase`1">
            <summary>
            Strongly typed base class for shims of reference types
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimBase`1.#ctor">
            <summary>
            Initializes the instance. Uses the 'DefaultValue' behavior.
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimBase`1.#ctor(`0)">
            <summary>
            Initializes the shim with an instance. Uses the 'Fallthrough' behavior.
            </summary>
            <param name="instance"></param>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.Shims.ShimBase`1.Instance">
            <summary>
            Gets the runtime instance associated to the shim type.
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.Shims.ShimBase`1.IsInstanceOwned">
            <summary>
            Gets a value that indicates the shim owns this instance.
            If true, the instance behavior should apply to all methods applied on this instance,
            if false, only method from type T will have the behavior
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimBase`1.GetInstance">
            <summary>
            Internal method used when binding shim methods
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimBase`1.op_Implicit(Microsoft.QualityTools.Testing.Fakes.Shims.ShimBase{`0})~`0">
            <summary>
            Implicit operator conversion to the shimmed type
            </summary>
            <param name="shim"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.Shims.ShimBase`1.InstanceBehavior">
            <summary>
            Gets the shim fallback behavior for the current instance
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimBase`1.BehaveAsNotImplemented">
            <summary>
            Assign the NotImplemented behavior to the current instance
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimBase`1.BehaveAsDefaultValue">
            <summary>
            Assign the Default behavior to the current instance.
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Shims.ShimBehaviorBase">
            <summary>
            Abstract base class for IShimBehavior implementations
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimBehaviorBase.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the shim behavior
            </summary>
            <param name="assemblyName"></param>
            <param name="typeNameSuffix"></param>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimBehaviorBase.CreateDelegate``1">
            <summary>
            Creates a new instance of the delegate
            </summary>
            <typeparam name="TDelegate"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimBehaviorBase.TryCreateDelegate(System.Type,System.Delegate@)">
            <summary>
            Tries to create a new instance of the delegate
            </summary>
            <param name="delegateType"></param>
            <param name="delegate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimBehaviorBase.EmitDelegateBody(System.Type,System.Reflection.ParameterInfo[],System.Reflection.Emit.MethodBuilder)">
            <summary>
            Emits the delegate body
            </summary>
            <param name="delegateReturnType"></param>
            <param name="delegateParameters"></param>
            <param name="methodBuilder"></param>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimBehaviorBase.TryGetShimMethod(System.Reflection.MethodBase,System.Delegate@)">
            <summary>
            Tries to get the shim for a given method
            </summary>
            <param name="method"></param>
            <param name="shim"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Shims.ShimClassAttribute">
            <summary>
            Attribute that specifies the target type of a shim class.
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimClassAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.QualityTools.Testing.Fakes.Shims.ShimClassAttribute"/> class.
            </summary>
            <param name="targetType">Type of the target.</param>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.Shims.ShimClassAttribute.TargetType">
            <summary>
            Gets the type of the target.
            </summary>
            <value>The type of the target.</value>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Shims.ShimInvalidOperationException">
            <summary>
            Invalid operation specific to the shims
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimInvalidOperationException.#ctor">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimInvalidOperationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the exception
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimInvalidOperationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the exception
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimInvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the exception
            </summary>
            <param name="context"></param>
            <param name="info"></param>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Shims.ShimMethodAttribute">
            <summary>
            Specifies a shim method target
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimMethodAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.QualityTools.Testing.Fakes.Shims.ShimMethodAttribute"/> class.
            </summary>
            <param name="shortName">The short name.</param>
            <param name="binding">The flags - must be defined in ShimBinding.</param>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.Shims.ShimMethodAttribute.ShortName">
            <summary>
            Gets the short name.
            </summary>
            <value>The short name.</value>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.Shims.ShimMethodAttribute.Binding">
            <summary>
            Gets the flags.
            </summary>
            <value>The flags.</value>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Shims.ShimMethodNotBindableException">
            <summary>
            An exception thrown when an interface method could not be bound through the 'Bind' method.
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimMethodNotBindableException.#ctor">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimMethodNotBindableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimMethodNotBindableException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimMethodNotBindableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Shims.ShimMethodShimmedEventArgs">
            <summary>
            Raised when a method is shimmed
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimMethodShimmedEventArgs.#ctor(System.Delegate,System.Object,System.Reflection.MethodBase)">
            <summary>
            Initializes the instance
            </summary>
            <param name="optionalShim"></param>
            <param name="optionalReceiver"></param>
            <param name="method"></param>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.Shims.ShimMethodShimmedEventArgs.Shim">
            <summary>
            Gets the shim delegate if any
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.Shims.ShimMethodShimmedEventArgs.Receiver">
            <summary>
            Gets the receiver instance if any
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.Shims.ShimMethodShimmedEventArgs.Method">
            <summary>
            Gets the shimmed method
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Shims.ShimNotImplementedException">
            <summary>
            An exception thrown when a call was made to a method which was not shimmed. 
            Change the shim behavior or attach a delegate to the property associated to the shimmed method.
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimNotImplementedException.#ctor">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimNotImplementedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimNotImplementedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimNotImplementedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Shims.ShimNotSupportedException">
            <summary>
            Raised when the shimmed method cannot be instrumented due to limitation of the runtime
            instrumentation.
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimNotSupportedException.#ctor">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimNotSupportedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimNotSupportedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Shims.ShimOutdatedException">
            <summary>
            An exception thrown when a method inside a shim could not be resolved.
            This happens when the Fakes assembly gets out of date and needs to be regenerated.
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimOutdatedException.#ctor">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimOutdatedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimOutdatedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimOutdatedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Shims.ShimRuntime">
            <summary>
            Shim runtime. For internal use only.
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.Shims.ShimRuntime.HasContext">
            <summary>
            Gets a value indicating if a context is enaled
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimRuntime.AcquireProtectingThreadContext">
            <summary>
            Creates a thread-specific context where shims won't be executes.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.Shims.ShimRuntime.IsThreadProtected">
            <summary>
            Gets a value that indicates if the thread is currently protected.
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimRuntime.CreateContext">
            <summary>
            Creates a context where shims and detours are cleared when the returned disposbale is disposed.
            The context MUST be disposed to ensure that are cleaned up after the test.
            </summary>
            <returns>a new context</returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimRuntime.CreateUninitializedInstance(System.Type)">
            <summary>
            Gets an uninitialized instance of the shimmed type (i.e. no constructor were run)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimRuntime.CreateUninitializedInstance``1">
            <summary>
            Gets an uninitialized instance of the shimmed type (i.e. no constructor were run)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimRuntime.RegisterStateCleaner(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action)">
            <summary>
            Registers a delegate that should be executed when the context is disposed
            </summary>
            <param name="stateCleaner"></param>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimRuntime.SetShimPublicInstance(System.Delegate,System.Type,System.Object,System.String,System.Type,System.Type[])">
            <summary>
            Sets the stub for public instance method
            </summary>
            <param name="optionalStub">The stub.</param>
            <param name="receiverType">type of the receiver</param>
            <param name="optionalReceiver">The receiver if any</param>
            <param name="name">The name.</param>
            <param name="returnType">The return type.</param>
            <param name="parameterTypes">The parameter types.</param>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimRuntime.SetShimNonPublicInstance(System.Delegate,System.Type,System.Object,System.String,System.Type,System.Type[])">
            <summary>
            Sets the stub for non public instance method
            </summary>
            <param name="optionalStub">The stub.</param>
            <param name="receiverType">type of the receiver</param>
            <param name="optionalReceiver">The receiver if specified</param>
            <param name="name">The name.</param>
            <param name="returnType">The return type.</param>
            <param name="parameterTypes">The parameter types.</param>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimRuntime.SetShimPublicStatic(System.Delegate,System.Type,System.String,System.Type,System.Type[])">
            <summary>
            Sets the stub for public instance method
            </summary>
            <param name="optionalStub">The stub.</param>
            <param name="receiverType">type of the receiver</param>
            <param name="name">The name.</param>
            <param name="returnType">The return type.</param>
            <param name="parameterTypes">The parameter types.</param>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimRuntime.SetShimNonPublicStatic(System.Delegate,System.Type,System.String,System.Type,System.Type[])">
            <summary>
            Sets the stub for non public instance method
            </summary>
            <param name="optionalStub">The stub.</param>
            <param name="receiverType">type of the receiver</param>
            <param name="name">The name.</param>
            <param name="returnType">The return type.</param>
            <param name="parameterTypes">The parameter types.</param>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimRuntime.SetShim(System.Delegate,System.Type,System.Object,System.String,Microsoft.QualityTools.Testing.Fakes.Shims.ShimBinding,System.Type,System.Type[])">
            <summary>
            Sets the stub
            </summary>
            <param name="optionalStub">The stub, may be null.</param>
            <param name="receiverType">type of the receiver</param>
            <param name="optionalReceiver">The receiver</param>
            <param name="name">The name.</param>
            <param name="flags">The flags.</param>
            <param name="returnType">The return type.</param>
            <param name="parameterTypes">The parameter types.</param>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimRuntime.SetGenericShimPublicInstance(System.Delegate,System.Type,System.Object,System.String,System.Type[],System.Type,System.Type[])">
            <summary>
            Sets the stub for a public instance generic method
            </summary>
            <param name="optionalStub">The stub.</param>
            <param name="receiverType">type of the receiver</param>
            <param name="optionalReceiver">The receiver if specified</param>
            <param name="name">The name.</param>
            <param name="genericMethodArguments">The generic method type arguments.</param>
            <param name="returnType">The return type.</param>
            <param name="parameterTypes">The parameter types.</param>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimRuntime.SetGenericShimPublicStatic(System.Delegate,System.Type,System.String,System.Type[],System.Type,System.Type[])">
            <summary>
            Sets the stub for a public static generic method
            </summary>
            <param name="optionalStub">The stub.</param>
            <param name="receiverType">type of the receiver</param>
            <param name="name">The name.</param>
            <param name="genericMethodArguments">The generic method type arguments.</param>
            <param name="returnType">The return type.</param>
            <param name="parameterTypes">The parameter types.</param>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimRuntime.SetGenericShimNonPublicInstance(System.Delegate,System.Type,System.Object,System.String,System.Type[],System.Type,System.Type[])">
            <summary>
            Sets the stub for a non public instance generic method
            </summary>
            <param name="optionalStub">The stub.</param>
            <param name="receiverType">type of the receiver</param>
            <param name="optionalReceiver"></param>
            <param name="name">The name.</param>
            <param name="genericMethodArguments">The generic method type arguments.</param>
            <param name="returnType">The return type.</param>
            <param name="parameterTypes">The parameter types.</param>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimRuntime.SetGenericShimNonPublicStatic(System.Delegate,System.Type,System.String,System.Type[],System.Type,System.Type[])">
            <summary>
            Sets the stub for a non public static generic method
            </summary>
            <param name="optionalStub">The stub.</param>
            <param name="receiverType">the type of the receiver</param>
            <param name="name">The name.</param>
            <param name="genericMethodArguments">The generic method type arguments.</param>
            <param name="returnType">The return type.</param>
            <param name="parameterTypes">The parameter types.</param>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimRuntime.SetGenericShim(System.Delegate,System.Type,System.Object,System.String,Microsoft.QualityTools.Testing.Fakes.Shims.ShimBinding,System.Type[],System.Type,System.Type[])">
            <summary>
            Sets the stub using
            </summary>
            <param name="optionalStub">The stub.</param>
            <param name="receiverType">the type of the receiver</param>
            <param name="optionalReceiver">the receiver if any</param>
            <param name="name">The name.</param>
            <param name="flags">The flags.</param>
            <param name="genericMethodArguments">The generic method type arguments.</param>
            <param name="returnType">The return type.</param>
            <param name="parameterTypes">The parameter types.</param>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimRuntime.SetShim(System.Delegate,System.Object,System.Reflection.MethodBase)">
            <summary>
            Sets a shim for a given method.
            </summary>
            <param name="optionalStub"></param>
            <param name="optionalReceiver"></param>
            <param name="method"></param>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimRuntime.GetShim(System.Object,System.Reflection.MethodBase)">
            <summary>
            Gets the shim for a given method, if any.
            </summary>
            <param name="optionalReceiver"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimRuntime.SetShimMethod(System.Delegate,System.Object,System.Reflection.MethodBase)">
            <summary>
            Sets a stub for a given method. Must be run under a protected context.
            </summary>
            <param name="optionalStub"></param>
            <param name="optionalReceiver">the receiver if specified</param>
            <param name="method"></param>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimRuntime.GetShimMethod(System.Object,System.Reflection.MethodBase)">
            <summary>
            Gets a stub for a given method. Must be run under a protected context.
            </summary>
            <param name="_receiver">the receiver if specified</param>
            <param name="method"></param>
        </member>
        <member name="E:Microsoft.QualityTools.Testing.Fakes.Shims.ShimRuntime.ShimmedMethod">
            <summary>
            Raised when a method is shimmed with a delegate
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimRuntime.ClearCache">
            <summary>
            Clears internal caches
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimRuntime.Clear">
            <summary>
            Clears any cached shim instances
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimRuntime.Bind``3(``1,``2)">
            <summary>
            Binds the members of an interface to shim redirections
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimRuntime.BindCompiler.RegisterDelegates(System.Reflection.Assembly)">
            <summary>
            collects the delegates generated for that assembly
            that will be needed for Bind
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimRuntime.BindCompiler.UnCurryDelegate(System.Delegate,System.Type)">
            <summary>
            Uncurries a delegate based on it's signature
            </summary>
            <param name="delegate"></param>
            <param name="receiverType">receiver type to uncurry</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimRuntime.AttachBehavior(Microsoft.QualityTools.Testing.Fakes.Shims.ShimInstanceBehaviorClosure@,System.Object,System.Type,Microsoft.QualityTools.Testing.Fakes.Shims.IShimBehavior)">
            <summary>
            Registers the behavior for a given shim instance
            </summary>
            <param name="_behavior"></param>
            <param name="receiver"></param>
            <param name="_targetType">specifies the type if the behavior should only apply to methods from that type</param>
            <param name="shimBehavior"></param>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Shims.ShimBehaviors">
            <summary>
            A static class holding the global shim behavior
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimBehaviors.Clear">
            <summary>
            Resets the current shim behavior to default.
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.Shims.ShimBehaviors.DefaultValue">
            <summary>
            Gets a shim behavior that return the default value or null and assign out parameter to their default values.
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.Shims.ShimBehaviors.NotImplemented">
            <summary>
            Gets a shim behavior that throws a ShimNotImplementedException.
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.Shims.ShimBehaviors.Fallthrough">
            <summary>
            Get a behavior that calls into the original implementation when no delegate is provided.
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.Shims.ShimBehaviors.Current">
            <summary>
            Gets or sets the current default shim behavior. This instance
            is used to intialize any new shim instance.
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimBehaviors.BehaveAsNotImplemented">
            <summary>
            Assigns the 'not implemented' behavior as
            the default behavior
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimBehaviors.BehaveAsNotImplemented(System.Type)">
            <summary>
            Assigns the 'not implemented' behavior as
            the behavior of type
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimBehaviors.BehaveAsDefaultValue">
            <summary>
            Assign the 'default value' behavior as the default behavior
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimBehaviors.BehaveAsDefaultValue(System.Type)">
            <summary>
            Assigns the 'default value' behavior as
            the behavior of type
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimBehaviors.BehaveAsFallthrough">
            <summary>
            Assign the 'fallthrough' behavior as the default behavior
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimBehaviors.BehaveAsFallthrough(System.Type)">
            <summary>
            Assigns the 'fallthrough' behavior as
            the behavior of type
            </summary>
            <param name="type"></param>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.Shims.ShimBehaviors.CurrentProxy">
            <summary>
            Gets a shim behavior that always queries the Current property
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.ShimBehaviors.AttachToType(System.Type,Microsoft.QualityTools.Testing.Fakes.Shims.IShimBehavior)">
            <summary>
            Sets the behavior for all members of a type.
            Returns an instance that controls the lifetime of the behavior.
            </summary>
            <param name="type"></param>
            <param name="behavior"></param>
            <returns>instance that can be used to detach the behavior</returns>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Shims.ShimBehaviors.ShimTypeDefinitionBehaviorClosure">
            <summary>
            A behavior that applies a shim behavior to any member of a given type
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Shims.ShimBinding">
            <summary>
            Shortcuts for Binding flags
            </summary>
        </member>
        <member name="F:Microsoft.QualityTools.Testing.Fakes.Shims.ShimBinding.None">
            <summary>
            No binding flags
            </summary>
        </member>
        <member name="F:Microsoft.QualityTools.Testing.Fakes.Shims.ShimBinding.PublicInstance">
            <summary>
            Public instance bindings
            </summary>
        </member>
        <member name="F:Microsoft.QualityTools.Testing.Fakes.Shims.ShimBinding.PublicStatic">
            <summary>
            Public static bindings
            </summary>
        </member>
        <member name="F:Microsoft.QualityTools.Testing.Fakes.Shims.ShimBinding.NonPublicInstance">
            <summary>
            Non public static bindings
            </summary>
        </member>
        <member name="F:Microsoft.QualityTools.Testing.Fakes.Shims.ShimBinding.NonPublicStatic">
            <summary>
            Non public static bindings
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Shims.IUncurrifier">
            <summary>
            A closure that uncurryfies a delegate, untyped
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.Shims.IUncurrifier.InnerDelegate">
            <summary>
            Gets the inner delegate
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Shims.IUncurrifier`1">
            <summary>
            A closure that uncurryfies a delegate
            </summary>
            <typeparam name="TDelegate"></typeparam>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.Shims.IUncurrifier`1.InnerDelegate">
            <summary>
            The inner delegate
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Shims.Uncurrifier`1">
            <summary>
            Abstract base class for IUncurryfier implementations
            </summary>
            <typeparam name="TDelegate"></typeparam>
        </member>
        <member name="F:Microsoft.QualityTools.Testing.Fakes.Shims.Uncurrifier`1.InnerDelegate">
            <summary>
            The inner delegate
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Shims.Uncurrifier`1.#ctor(`0)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="innerDelegate"></param>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.Shims.Uncurrifier`1.Microsoft#QualityTools#Testing#Fakes#Shims#IUncurrifier{TDelegate}#InnerDelegate">
            <summary>
            Gets the inner delegate
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Stubs.IPartialStub">
            <summary>
            A stubs that inherits from an concrete class and overrides virtual methods
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.Stubs.IPartialStub.CallBase">
            <summary>
            Gets or sets a value indicating whether the stub should call the base class method
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Stubs.IStub">
            <summary>
            A stub type.
            </summary>
            <remarks>
            <para>
            All generated stubs implement this interface which provides
            a 'default' behavior service, through the <see cref="T:Microsoft.QualityTools.Testing.Fakes.Stubs.StubBehaviors"/> property.
            </para>
            <para>
            When a method that is not stubbed is called, the current default stub is used.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.Stubs.IStub.InstanceBehavior">
            <summary>
            Gets or sets the behavior that is used as a fallback mechanism.
            Common behaviors can be instantiated from the <see cref="T:Microsoft.QualityTools.Testing.Fakes.Stubs.StubBehaviors"/> 
            class.
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Stubs.IStubObservable">
            <summary>
            A stub whose call can be observed
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.Stubs.IStubObservable.InstanceObserver">
            <summary>
            Gets or sets the observer.
            Common observers can be instantiated from the <see cref="T:Microsoft.QualityTools.Testing.Fakes.Stubs.StubObservers"/> 
            class.
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Stubs.IStub`1">
            <summary>
            A typed IStub interface
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Stubs.IStubBehavior">
            <summary>
            An object that provides the default behavior of stubbed members
            that have not been redefined.
            </summary>
            <remarks>
            A default stub can be attached
            to a stub through the <see cref="P:Microsoft.QualityTools.Testing.Fakes.Stubs.IStub.InstanceBehavior"/>
            property.
            </remarks>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Stubs.IStubBehavior.TryGetValue``1(System.Object,``0@)">
            <summary>
            Gets the default property value when a backing filed is attached to a property
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="name">name of the instance.</param>
            <param name="value">The value.</param>
            <returns>true if a value should be attached to the property</returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Stubs.IStubBehavior.Result``2(``0,System.String)">
            <summary>
            Gets the default result value of a stubbed method
            </summary>
            <typeparam name="TStub">The type of the stub.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="target">Stub instance, may be null for static methods.</param>
            <param name="name">name of the value</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Stubs.IStubBehavior.ValueAtReturn``2(``0,System.String,``1@)">
            <summary>
            Gets the value of an out parameter
            </summary>
            <typeparam name="TStub">The type of the stub.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="target">the stub instance</param>
            <param name="name">the name of the choice</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Stubs.IStubBehavior.ValueAtEnterAndReturn``2(``0,System.String,``1@)">
            <summary>
            Gets or sets the value of a ref parameter
            </summary>
            <typeparam name="TStub">The type of the stub.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="target">The stub.</param>
            <param name="name">The name of the choice</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Stubs.IStubBehavior.VoidResult``1(``0,System.String)">
            <summary>
            Executes the default behavior of a stubbed method
            </summary>
            <typeparam name="TStub">The type of the stub.</typeparam>
            <param name="target">Stub instance, may be null for static methods.</param>
            <param name="name">name of the choice</param>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Stubs.IStubObserver">
            <summary>
            Observes stub execution
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Stubs.IStubObserver.Enter(System.Type,System.Delegate)">
            <summary>
            Called when entering a stub method.
            </summary>
            <param name="stubbedType">the type in which the stubbed method is declared</param>
            <param name="stubCall">a bound delegate to the method being executed in the stub. may be null</param>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Stubs.IStubObserver.Enter(System.Type,System.Delegate,System.Object)">
            <summary>
            Called when entering a stub method with one argument.
            </summary>
            <param name="stubbedType">the type in which the stubbed method is declared</param>
            <param name="stubCall">a bound delegate to the method being executed in the stub. may be null</param>
            <param name="arg1"></param>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Stubs.IStubObserver.Enter(System.Type,System.Delegate,System.Object,System.Object)">
            <summary>
            Called when entering a stub method with two argument.
            </summary>
            <param name="stubbedType">the type in which the stubbed method is declared</param>
            <param name="stubCall">a bound delegate to the method being executed in the stub. may be null</param>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Stubs.IStubObserver.Enter(System.Type,System.Delegate,System.Object,System.Object,System.Object)">
            <summary>
            Called when entering a stub method with three argument.
            </summary>
            <param name="stubbedType">the type in which the stubbed method is declared</param>
            <param name="stubCall">a bound delegate to the method being executed in the stub. may be null</param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Stubs.IStubObserver.Enter(System.Type,System.Delegate,System.Object[])">
            <summary>
            Called when entering a stub method with more than argument.
            </summary>
            <param name="stubbedType">the type in which the stubbed method is declared</param>
            <param name="stubCall">a bound delegate to the method being executed in the stub. may be null</param>
            <param name="args">the arguments</param>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Stubs.StubBase">
            <summary>
            Abstract base class for <see cref="T:Microsoft.QualityTools.Testing.Fakes.Stubs.IStub"/> implementations.
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.Stubs.StubBase.InstanceBehavior">
            <summary>
            Gets or sets the default stub implementation.
            Returns StubBehaviors.Current if not set.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.Stubs.StubBase.InstanceObserver">
            <summary>
            Gets or sets the default stub observer.
            Returns StubObservers.Current if not set.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Stubs.StubBase.BehaveAsNotImplemented">
            <summary>
            Assigns the NotImplemented behavior to this instance
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Stubs.StubBase.BehaveAsDefaultValue">
            <summary>
            Assigns the DefaultValue behavior to this instance
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Stubs.StubBase`1">
            <summary>
            Abstract base class for <see cref="T:Microsoft.QualityTools.Testing.Fakes.Stubs.IStub"/> implementations that support generics
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Stubs.StubBase`1.#ctor">
            <summary>
            Initializes a new instance of the StubBase class.
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Stubs.StubBehaviors">
            <summary>
            Common behaviors for behaved types.
            </summary>
            <remarks>
            <see cref="T:Microsoft.QualityTools.Testing.Fakes.Stubs.IStubBehavior"/> instance define the
            default behavior of stubbed method and properties when those members
            have not been redefined by the user.
            </remarks>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.Stubs.StubBehaviors.DefaultValue">
            <summary>
            Gets a default stub that always return the default type value (null, 0, etc...)
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.Stubs.StubBehaviors.NotImplemented">
            <summary>
            Gets a behavior that always throws a 
            <see cref="T:System.NotImplementedException"/> exception
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.Stubs.StubBehaviors.Current">
            <summary>
            Gets orsets the current default stub implementation. This instance
            is used to intialize any stub instance.
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Stubs.StubBehaviors.BehaveAsNotImplemented">
            <summary>
            Assigns the 'not implemented' behavior as
            the default behavior
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Stubs.StubBehaviors.GetValueOrCurrent(Microsoft.QualityTools.Testing.Fakes.Stubs.IStubBehavior)">
            <summary>
            Returns <paramref name="behavior"/> if not null,
            the value of Current otherwise.
            </summary>
            <param name="behavior"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.Stubs.StubBehaviors.CurrentProxy">
            <summary>
            Gets a proxy that always queries the current behaved behavior
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Stubs.StubClassAttribute">
            <summary>
            Attribute that specifies the target type of a stub class.
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Stubs.StubClassAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.QualityTools.Testing.Fakes.Stubs.StubClassAttribute"/> class.
            </summary>
            <param name="targetType">Type of the target.</param>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.Stubs.StubClassAttribute.TargetType">
            <summary>
            Gets the type of the target.
            </summary>
            <value>The type of the target.</value>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Stubs.StubDelegateMap">
            <summary>
            A lightweight dictionary of delegates, used to store stubs of generic methods.
            This class is meant to be used in the Fakes generated code and not from user code.
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Stubs.StubDelegateMap.State">
            <summary>
            To avoid allocating a dictionary of delegates, 
            we use the same field to store different 'collections
            </summary>
        </member>
        <member name="F:Microsoft.QualityTools.Testing.Fakes.Stubs.StubDelegateMap.State.Empty">
            <summary>
            No delegate is stored
            </summary>
        </member>
        <member name="F:Microsoft.QualityTools.Testing.Fakes.Stubs.StubDelegateMap.State.One">
            <summary>
            A single delegate is stored
            </summary>
        </member>
        <member name="F:Microsoft.QualityTools.Testing.Fakes.Stubs.StubDelegateMap.State.Dictionary">
            <summary>
            A dictionary of delegates is stored
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Stubs.StubDelegateMap.TryGetValue``1(``0@)">
            <summary>
            Tries to get the delegate for a given type
            </summary>
            <typeparam name="TDelegate"></typeparam>
            <param name="delegate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Stubs.StubDelegateMap.One(System.Delegate)">
            <summary>
            Creates a dictionary with one element
            </summary>
            <param name="delegate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Stubs.StubDelegateMap.Concat(Microsoft.QualityTools.Testing.Fakes.Stubs.StubDelegateMap,System.Delegate)">
            <summary>
            Combines the @delegate into the existing dictionary dic
            and returns a new copy.
            </summary>
            <param name="dictionary"></param>
            <param name="delegate"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Stubs.StubObserver">
            <summary>
            A default synchronized implementation of IStubObserver.
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Stubs.StubObserver.Clear">
            <summary>
            Clears the observed calls
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Stubs.StubObserver.GetCalls">
            <summary>
            Gets a snapshot of the calls observed
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Stubs.StubObservedCall">
            <summary>
            Information collected through the stub observer when entering a stub.
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Stubs.StubObservedCall.#ctor(System.Type,System.Delegate,System.Object[])">
            <summary>
            Initializes a new StubObservedCall instance
            </summary>
            <param name="stubbedType"></param>
            <param name="stub"></param>
            <param name="arguments"></param>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.Stubs.StubObservedCall.StubbedType">
            <summary>
            Gets the stubbed type
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.Stubs.StubObservedCall.Stub">
            <summary>
            Gets the stub
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Stubs.StubObservedCall.GetArguments">
            <summary>
            Gets the arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.Stubs.StubObservedCall.StubbedMethod">
            <summary>
            Tries to resolve the stubbed method. May return null if resolution fails.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Stubs.StubObservers">
            <summary>
            Common observers
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.Stubs.StubObservers.Current">
            <summary>
            Gets or sets the current default stub observer. May be null.
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Stubs.StubObservers.GetValueOrCurrent(Microsoft.QualityTools.Testing.Fakes.Stubs.IStubObserver)">
            <summary>
            Returns <paramref name="observer"/> if not null,
            the value of Current otherwise.
            </summary>
            <param name="observer"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Stubs.StubRuntime">
            <summary>
            Runtime helpers supporting stubs
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Stubs.StubRuntime.BindProperty(System.Type,System.Object,System.Type,System.String,System.Boolean,System.Type)">
            <summary>
            Binds a delegate to the property getter. Might return null when reflection fails.
            </summary>
            <param name="delegateType"></param>
            <param name="target"></param>
            <param name="type"></param>
            <param name="propertyName"></param>
            <param name="isGetter"></param>
            <param name="returnType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Stubs.StubRuntime.BindIndexer(System.Type,System.Object,System.Type,System.String,System.Boolean,System.Type,System.Type)">
            <summary>
            Binds a delegate to the property getter. Might return null when reflection fails.
            </summary>
            <param name="delegateType"></param>
            <param name="target"></param>
            <param name="type"></param>
            <param name="propertyName"></param>
            <param name="isGetter"></param>
            <param name="argumentType"></param>
            <param name="returnType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Stubs.StubRuntime.BindIndexer(System.Type,System.Object,System.Type,System.String,System.Boolean,System.Type,System.Type[])">
            <summary>
            Binds a delegate to the property getter. Might return null when reflection fails.
            </summary>
            <param name="delegateType"></param>
            <param name="target"></param>
            <param name="type"></param>
            <param name="propertyName"></param>
            <param name="isGetter"></param>
            <param name="argumentTypes"></param>
            <param name="returnType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Stubs.StubRuntime.ResolveStubbedMethod(System.Type,System.Delegate)">
            <summary>
            Given a stubbed type and the stub method delegate, looks up the method defined on the stubbed type.
            Returns null if unsuccessful.
            </summary>
            <param name="stubbedType"></param>
            <param name="stubCall"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Stubs.StubValueHolder`1">
            <summary>
            A simple value holder.
            This class is meant to be used in the Fakes generated code and not from user code.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Microsoft.QualityTools.Testing.Fakes.Stubs.StubValueHolder`1.Value">
            <summary>
            the value
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Stubs.StubValueHolder`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.QualityTools.Testing.Fakes.Stubs.StubValueHolder`1"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Stubs.StubValueHolder`1.GetGetter">
            <summary>
            Gets the getter method
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Stubs.StubValueHolder`1.GetSetter">
            <summary>
            Gets the setter method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Stubs.StubValueHolder`1.GetValue">
            <summary>
            Gets this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.Stubs.StubValueHolder`1.SetValue(`0)">
            <summary>
            Sets the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.IntelliTraceInstrumentationProvider.ResolveProfilerPath">
            <summary>
            Resolves profiler path from the environment variables.
            </summary>
            <remarks>
            This method mimics the logic CLR uses to attach a profiler when starting a new process. 
            It first checks the COR_PROFILER_PATH. If this variable is not specified, it tries the 
            COR_PROFILER to get profiler's CLSID and acceses registry to find the file location.
            </remarks>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.IntelliTraceInstrumentationProvider.DetourProvider(System.Object,System.RuntimeMethodHandle,System.RuntimeTypeHandle,System.RuntimeTypeHandle[],System.Object@,System.IntPtr@)">
            <summary>
            Called by the IntelliTrace profiler to get detour of a method. 
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.IUnitTestIsolationInstrumentationProvider">
            <summary>
            A manager that allows to attach and detouch detours. 
            The manager takes care of interacting with the profiler.
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.IUnitTestIsolationInstrumentationProvider.IsDetoursEnabled">
            <summary>
            Checks that the process has detours enabled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.IUnitTestIsolationInstrumentationProvider.CanDetour(System.Reflection.MethodBase)">
            <summary>
            Gets a value that indicates if the method can be detoured
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.IUnitTestIsolationInstrumentationProvider.AcquireProtectingThreadContext">
            <summary>
            Creates a context where the instrumentation is disabled
            in the current thread.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.IUnitTestIsolationInstrumentationProvider.IsThreadProtected">
            <summary>
            Gets a value that indicates if the current thread is already in a protecting context.
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.LibraryMethods">
            <summary>
            Strongly-typed wrappers for <see cref="T:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.NativeMethods"/>.
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.UnitTestIsolationException">
            <summary>
            Exception raised in the UnitTestIsolationRuntime
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.UnitTestIsolationException.#ctor">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.UnitTestIsolationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the exception
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.UnitTestIsolationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the exception
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.UnitTestIsolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the exception
            </summary>
            <param name="context"></param>
            <param name="info"></param>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.DetourFactory">
            <summary>
            A factory for a detour. Returns null if none created.
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.DetourCallback">
            <summary>
            A delegate that receives the optional receiver, the method and the detour
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.UnitTestIsolationRuntime">
            <summary>
            A class that controls the detours added in the system
            </summary>
        </member>
        <member name="F:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.UnitTestIsolationRuntime._instrumentationProvider">
            <summary>
            Interface that interacts with the lower-level profiler. Might be null specially in new AppDomains.
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.UnitTestIsolationRuntime.InstrumentationProvider">
            <summary>
            Gets or sets the instrumentation provider. 
            This property is not thread safe.
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.UnitTestIsolationRuntime.AcquireProtectingThreadContext">
            <summary>
            Acquires a thread protecting context from the instrumentation provider
            if any.
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.UnitTestIsolationRuntime.IsThreadProtected">
            <summary>
            Gets a value that indicates if the thread is currently protected.
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.UnitTestIsolationRuntime.DetourDispatcherKey">
            <summary>
            Stores information necessary to identify a detour dispatcher for a given method.
            </summary>
        </member>
        <member name="F:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.UnitTestIsolationRuntime.DetourDispatcherKey.methodHandle">
            <summary>
            Stores pointer to the method metadata. We cannot use a <see cref="T:System.Reflection.MethodBase"/> 
            object here because reflection returns two different objects with the same handle 
            when you request the method implemented in a base class from two different child classes.
            </summary>
        </member>
        <member name="F:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.UnitTestIsolationRuntime.DetourDispatcherKey.typeHandle">
            <summary>
            Stores pointer to the type metadata. We cannot use the method handle alone, because 
            it does not allow us to distinguish generic methods of different constructed types. For
            example Collection{string}.Add and Collection{object}.Add have the same method handle, 
            because the runtime reuses the same method implementation for both generic classes.
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.UnitTestIsolationRuntime.DetourCallbackData">
            <summary>
            any method called on this type should be enclosed in a write lock
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.UnitTestIsolationRuntime.DetourDispatcher">
            <summary>
            Dispatched detoured methods to targetted receivers.
            </summary>
            <remarks>
            Call are first dispatched to individual instances, or
            to the main delegate if anything else.
            </remarks>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.UnitTestIsolationRuntime.DetourDispatcher.GetDetour(System.Object)">
            <summary>
            Gets the detour, given an instance. May be null.
            </summary>
            <param name="_receiver"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.UnitTestIsolationRuntime.GetKey(System.Reflection.MethodBase)">
            <summary>
            Gets a unique key for a given method
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.UnitTestIsolationRuntime.IsValidDetour(System.Reflection.MethodBase,System.Delegate)">
            <summary>
            Validates a method / detour pair. This method is not protected.
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.UnitTestIsolationRuntime.ClearDetours">
            <summary>
            Clears all detours, caches (not the events!). This method is protected.
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.UnitTestIsolationRuntime.AttachFallbackBehavior(Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.DetourFactory)">
            <summary>
            Attaches the fallback behavior. This method is protected.
            </summary>
            <param name="fallbackBehavior">The fallback behavior.</param>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.UnitTestIsolationRuntime.DetachFallbackBehavior(Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.DetourFactory)">
            <summary>
            Detaches the fallback behavior. This method is protected.
            </summary>
        </member>
        <member name="E:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.UnitTestIsolationRuntime.AttachedUnsupportedMethod">
            <summary>
            Raised a detour was attached to an uninstrumentable method.
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.UnitTestIsolationRuntime.OnAttachedUnsupportedMethod(System.Reflection.MethodBase)">
            <summary>
            Raises AttachedUninstrumentableMethod
            </summary>
        </member>
        <member name="E:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.UnitTestIsolationRuntime.AttachedMethod">
            <summary>
            Raised a detour was attached to a method.
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.UnitTestIsolationRuntime.OnAttachedMethod(System.Reflection.MethodBase)">
            <summary>
            Raises AttachedMethod
            </summary>
        </member>
        <member name="E:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.UnitTestIsolationRuntime.DetachedMethod">
            <summary>
            Raised a detour was detached from a method.
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.UnitTestIsolationRuntime.OnDetachedMethod(System.Reflection.MethodBase)">
            <summary>
            Raises AttachedMethod
            </summary>
        </member>
        <member name="E:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.UnitTestIsolationRuntime.AtDetour">
            <summary>
            Raised when a detour is about to be taken 
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.UnitTestIsolationRuntime.EnsureInstrumentationProvider">
            <summary>
            Ensures that a detour instrumentation provider is loaded and enabled.
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.UnitTestIsolationRuntime.CheckInstrumentationProvider">
            <summary>
            Ensures that the detour instrumentation provider is configured and enabled.
            </summary>
            <exception cref="T:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.UnitTestIsolationException">the detour instrumentation provider is not configured</exception>
            <exception cref="T:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.UnitTestIsolationException">the detour instrumentation provider is not enabled</exception>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.UnitTestIsolationRuntime.AttachDetour(System.Object,System.Reflection.MethodBase,System.Delegate)">
            <summary>
            Attaches a detour to a given method. This method is protected.
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.UnitTestIsolationRuntime.ValidateMethod(System.Reflection.MethodBase)">
            <summary>
            Method validation that throws exceptions
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.UnitTestIsolationRuntime.IgnoreDetour(System.Reflection.MethodBase)">
            <summary>
            Registers a method that should be ignored for detouring. This method is protected.
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.UnitTestIsolationRuntime.DetachDetour(System.Object,System.Reflection.MethodBase)">
            <summary>
            Detaches detours from a given method. This method is protected.
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.UnitTestIsolationRuntime.GetDetour(System.Object,System.Reflection.MethodBase)">
            <summary>
            Gets a detour for the given receiver/method pair if any. This method is protected.
            This is a performance critical method.
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.UnitTestIsolationRuntime.DetourTarget">
            <summary>
            The current detour target.
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.UnitTestIsolationRuntime.GetDetourOrDefault(System.Object,System.Reflection.MethodBase)">
            <summary>
            Gets the registered detour for a given receiver,method pair if any. This method is protected.
            Does not invoke the fallback behavior.
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.UnitTestIsolationRuntime.InternalGetFallbackDetour(System.Object,System.Reflection.MethodBase)">
            <summary>
            Queries the fallback behavior for a detour.
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.ObjectReferenceIdentity">
            <summary>
            A comparer that uses object reference equality.
            </summary>
        </member>
        <member name="P:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.ObjectReferenceIdentity.Default">
            <summary>
            Gets the unique instance of the comparer
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.ObjectReferenceIdentity.Equals(System.Object,System.Object)">
            <summary>
            Gets a value indicating if x and y are the same reference
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.UnitTestIsolation.ObjectReferenceIdentity.GetHashCode(System.Object)">
            <summary>
            Gets the hashcode of obj
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesExtensions">
            <summary>
            Specialized extensions to provide behaviors to stubs and shims
            </summary>
            <summary>
            Specialized operations necessary for Fakes
            </summary>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``1})">
            <summary>
            Wraps the action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``1,``2})">
            <summary>
            Wraps the func into another func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutAction{``1,``2})">
            <summary>
            Wraps the out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``4(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutAction{``1,``2,``3})">
            <summary>
            Wraps the out out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>                         
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``4(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc{``1,``2,``3})">
            <summary>
            Wraps the out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``5(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutFunc{``1,``2,``3,``4})">
            <summary>
            Wraps the out out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction{``1,``2})">
            <summary>
            Wraps the ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>                         
            <typeparam name="TRef"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``4(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefAction{``1,``2,``3})">
            <summary>
            Wraps the ref ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>                         
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``4(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefFunc{``1,``2,``3})">
            <summary>
            Wraps the ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``5(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefFunc{``1,``2,``3,``4})">
            <summary>
            Wraps the ref ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``1,``2})">
            <summary>
            Wraps the action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``4(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``1,``2,``3})">
            <summary>
            Wraps the func into another func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``4(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutAction{``1,``2,``3})">
            <summary>
            Wraps the out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``5(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutAction{``1,``2,``3,``4})">
            <summary>
            Wraps the out out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>                         
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``5(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc{``1,``2,``3,``4})">
            <summary>
            Wraps the out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``6(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutFunc{``1,``2,``3,``4,``5})">
            <summary>
            Wraps the out out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``4(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction{``1,``2,``3})">
            <summary>
            Wraps the ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>                         
            <typeparam name="TRef"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``5(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefAction{``1,``2,``3,``4})">
            <summary>
            Wraps the ref ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>                         
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``5(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefFunc{``1,``2,``3,``4})">
            <summary>
            Wraps the ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``6(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefFunc{``1,``2,``3,``4,``5})">
            <summary>
            Wraps the ref ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``4(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``1,``2,``3})">
            <summary>
            Wraps the action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``5(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``1,``2,``3,``4})">
            <summary>
            Wraps the func into another func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``5(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutAction{``1,``2,``3,``4})">
            <summary>
            Wraps the out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``6(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutAction{``1,``2,``3,``4,``5})">
            <summary>
            Wraps the out out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>                         
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``6(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc{``1,``2,``3,``4,``5})">
            <summary>
            Wraps the out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``7(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutFunc{``1,``2,``3,``4,``5,``6})">
            <summary>
            Wraps the out out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``5(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction{``1,``2,``3,``4})">
            <summary>
            Wraps the ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>                         
            <typeparam name="TRef"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``6(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefAction{``1,``2,``3,``4,``5})">
            <summary>
            Wraps the ref ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>                         
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``6(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefFunc{``1,``2,``3,``4,``5})">
            <summary>
            Wraps the ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``7(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefFunc{``1,``2,``3,``4,``5,``6})">
            <summary>
            Wraps the ref ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``5(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``1,``2,``3,``4})">
            <summary>
            Wraps the action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``6(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``1,``2,``3,``4,``5})">
            <summary>
            Wraps the func into another func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``6(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutAction{``1,``2,``3,``4,``5})">
            <summary>
            Wraps the out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``7(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutAction{``1,``2,``3,``4,``5,``6})">
            <summary>
            Wraps the out out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>                         
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``7(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc{``1,``2,``3,``4,``5,``6})">
            <summary>
            Wraps the out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``8(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutFunc{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Wraps the out out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``6(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction{``1,``2,``3,``4,``5})">
            <summary>
            Wraps the ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>                         
            <typeparam name="TRef"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``7(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefAction{``1,``2,``3,``4,``5,``6})">
            <summary>
            Wraps the ref ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>                         
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``7(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefFunc{``1,``2,``3,``4,``5,``6})">
            <summary>
            Wraps the ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``8(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefFunc{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Wraps the ref ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``6(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``1,``2,``3,``4,``5})">
            <summary>
            Wraps the action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``7(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``1,``2,``3,``4,``5,``6})">
            <summary>
            Wraps the func into another func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``7(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutAction{``1,``2,``3,``4,``5,``6})">
            <summary>
            Wraps the out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``8(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutAction{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Wraps the out out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>                         
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``8(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Wraps the out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``9(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutFunc{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Wraps the out out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``7(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction{``1,``2,``3,``4,``5,``6})">
            <summary>
            Wraps the ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>                         
            <typeparam name="TRef"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``8(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefAction{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Wraps the ref ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>                         
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``8(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefFunc{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Wraps the ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``9(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefFunc{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Wraps the ref ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``7(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``1,``2,``3,``4,``5,``6})">
            <summary>
            Wraps the action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``8(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Wraps the func into another func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``8(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutAction{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Wraps the out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``9(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutAction{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Wraps the out out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>                         
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``9(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Wraps the out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``10(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Wraps the out out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``8(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Wraps the ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>                         
            <typeparam name="TRef"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``9(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefAction{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Wraps the ref ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>                         
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``9(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefFunc{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Wraps the ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``10(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Wraps the ref ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``8(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Wraps the action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``9(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Wraps the func into another func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``9(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutAction{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Wraps the out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``10(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Wraps the out out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>                         
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``10(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Wraps the out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``11(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Wraps the out out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``9(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Wraps the ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>                         
            <typeparam name="TRef"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``10(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Wraps the ref ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>                         
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``10(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Wraps the ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``11(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Wraps the ref ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``9(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Wraps the action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``10(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Wraps the func into another func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``10(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Wraps the out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``11(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Wraps the out out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>                         
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``11(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Wraps the out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``12(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Wraps the out out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``10(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Wraps the ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>                         
            <typeparam name="TRef"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``11(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Wraps the ref ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>                         
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``11(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Wraps the ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``12(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Wraps the ref ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``10(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Wraps the action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``11(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Wraps the func into another func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``11(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Wraps the out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``12(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Wraps the out out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>                         
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``12(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Wraps the out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``13(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Wraps the out out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``11(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Wraps the ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>                         
            <typeparam name="TRef"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``12(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Wraps the ref ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>                         
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``12(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Wraps the ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``13(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Wraps the ref ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``11(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Wraps the action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``12(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Wraps the func into another func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``12(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Wraps the out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``13(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Wraps the out out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>                         
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``13(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Wraps the out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``14(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Wraps the out out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``12(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Wraps the ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>                         
            <typeparam name="TRef"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``13(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Wraps the ref ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>                         
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``13(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Wraps the ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``14(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Wraps the ref ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``12(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Wraps the action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``13(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Wraps the func into another func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``13(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Wraps the out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``14(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Wraps the out out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>                         
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``14(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Wraps the out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``15(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Wraps the out out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``13(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Wraps the ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>                         
            <typeparam name="TRef"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``14(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Wraps the ref ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>                         
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``14(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Wraps the ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``15(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Wraps the ref ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``13(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Wraps the action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``14(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Wraps the func into another func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``14(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Wraps the out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``15(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Wraps the out out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>                         
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``15(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Wraps the out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``16(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Wraps the out out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``14(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Wraps the ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>                         
            <typeparam name="TRef"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``15(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Wraps the ref ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>                         
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``15(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Wraps the ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``16(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Wraps the ref ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``14(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Wraps the action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``15(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Wraps the func into another func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``15(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Wraps the out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``16(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Wraps the out out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>                         
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``16(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Wraps the out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``17(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            Wraps the out out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``15(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Wraps the ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>                         
            <typeparam name="TRef"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``16(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Wraps the ref ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>                         
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``16(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Wraps the ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``17(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            Wraps the ref ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``15(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Wraps the action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``16(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Wraps the func into another func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``16(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Wraps the out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``17(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            Wraps the out out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>                         
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``17(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            Wraps the out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``18(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17})">
            <summary>
            Wraps the out out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``16(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Wraps the ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>                         
            <typeparam name="TRef"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``17(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            Wraps the ref ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>                         
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``17(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            Wraps the ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``18(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17})">
            <summary>
            Wraps the ref ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``16(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Wraps the action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``17(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            Wraps the func into another func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``17(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            Wraps the out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``18(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17})">
            <summary>
            Wraps the out out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>                         
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``18(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17})">
            <summary>
            Wraps the out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``19(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18})">
            <summary>
            Wraps the out out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``17(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            Wraps the ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>                         
            <typeparam name="TRef"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``18(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17})">
            <summary>
            Wraps the ref ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>                         
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``18(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17})">
            <summary>
            Wraps the ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``19(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18})">
            <summary>
            Wraps the ref ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``17(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            Wraps the action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="T16"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``18(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17})">
            <summary>
            Wraps the func into another func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="T16"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``18(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17})">
            <summary>
            Wraps the out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="T16"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``19(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18})">
            <summary>
            Wraps the out out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>                         
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``19(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18})">
            <summary>
            Wraps the out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``20(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19})">
            <summary>
            Wraps the out out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``18(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17})">
            <summary>
            Wraps the ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>                         
            <typeparam name="TRef"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``19(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18})">
            <summary>
            Wraps the ref ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>                         
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``19(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18})">
            <summary>
            Wraps the ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``20(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19})">
            <summary>
            Wraps the ref ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``18(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17})">
            <summary>
            Wraps the action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="T16"></typeparam>
            <typeparam name="T17"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``19(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18})">
            <summary>
            Wraps the func into another func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="T16"></typeparam>
            <typeparam name="T17"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``19(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18})">
            <summary>
            Wraps the out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="T16"></typeparam>
            <typeparam name="T17"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``20(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19})">
            <summary>
            Wraps the out out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>        /// <typeparam name="T17"></typeparam>                         
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``20(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19})">
            <summary>
            Wraps the out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>        /// <typeparam name="T17"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``21(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20})">
            <summary>
            Wraps the out out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>        /// <typeparam name="T17"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``19(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18})">
            <summary>
            Wraps the ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>        /// <typeparam name="T17"></typeparam>                         
            <typeparam name="TRef"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``20(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19})">
            <summary>
            Wraps the ref ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>        /// <typeparam name="T17"></typeparam>                         
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``20(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19})">
            <summary>
            Wraps the ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>        /// <typeparam name="T17"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``21(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20})">
            <summary>
            Wraps the ref ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>        /// <typeparam name="T17"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``19(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18})">
            <summary>
            Wraps the action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="T16"></typeparam>
            <typeparam name="T17"></typeparam>
            <typeparam name="T18"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``20(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19})">
            <summary>
            Wraps the func into another func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="T16"></typeparam>
            <typeparam name="T17"></typeparam>
            <typeparam name="T18"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``20(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19})">
            <summary>
            Wraps the out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <typeparam name="T11"></typeparam>
            <typeparam name="T12"></typeparam>
            <typeparam name="T13"></typeparam>
            <typeparam name="T14"></typeparam>
            <typeparam name="T15"></typeparam>
            <typeparam name="T16"></typeparam>
            <typeparam name="T17"></typeparam>
            <typeparam name="T18"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``21(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20})">
            <summary>
            Wraps the out out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>        /// <typeparam name="T17"></typeparam>        /// <typeparam name="T18"></typeparam>                         
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``21(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20})">
            <summary>
            Wraps the out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>        /// <typeparam name="T17"></typeparam>        /// <typeparam name="T18"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``22(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20,``21})">
            <summary>
            Wraps the out out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>        /// <typeparam name="T17"></typeparam>        /// <typeparam name="T18"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return a null reference if func is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``20(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19})">
            <summary>
            Wraps the ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>        /// <typeparam name="T17"></typeparam>        /// <typeparam name="T18"></typeparam>                         
            <typeparam name="TRef"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``21(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefAction{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20})">
            <summary>
            Wraps the ref ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>        /// <typeparam name="T17"></typeparam>        /// <typeparam name="T18"></typeparam>                         
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``21(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20})">
            <summary>
            Wraps the ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>        /// <typeparam name="T17"></typeparam>        /// <typeparam name="T18"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``22(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefFunc{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20,``21})">
            <summary>
            Wraps the ref ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        /// <typeparam name="T1"></typeparam>        /// <typeparam name="T2"></typeparam>        /// <typeparam name="T3"></typeparam>        /// <typeparam name="T4"></typeparam>        /// <typeparam name="T5"></typeparam>        /// <typeparam name="T6"></typeparam>        /// <typeparam name="T7"></typeparam>        /// <typeparam name="T8"></typeparam>        /// <typeparam name="T9"></typeparam>        /// <typeparam name="T10"></typeparam>        /// <typeparam name="T11"></typeparam>        /// <typeparam name="T12"></typeparam>        /// <typeparam name="T13"></typeparam>        /// <typeparam name="T14"></typeparam>        /// <typeparam name="T15"></typeparam>        /// <typeparam name="T16"></typeparam>        /// <typeparam name="T17"></typeparam>        /// <typeparam name="T18"></typeparam>                
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return a null reference if action is a null reference.
            </returns>        
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action)">
            <summary>
            Wraps the action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>        
            <param name="action">the delegate to uncurryfy</param>
            <returns>
            a delegate that invokes <paramref name="action" /> by dropping the first argument;
            if action is a null reference, returns null.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``1})">
            <summary>
            Wraps the func into another func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>              
            <typeparam name="TResult"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            if func is a null reference, returns null.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutAction{``1})">
            <summary>
            Wraps the out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            if action is a nullreference, returns null
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutAction{``1,``2})">
            <summary>
            Wraps the out out action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument;
            if action is a nullreference, returns null
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc{``1,``2})">
            <summary>
            Wraps the out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return null if func is null
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``4(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutFunc{``1,``2,``3})">
            <summary>
            Wraps the out out func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="TResult"></typeparam>
            <typeparam name="TOut1"></typeparam>
            <typeparam name="TOut2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument
            return null if func is null
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction{``1})">
            <summary>
            Wraps the ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="TRef"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return null if action is null.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefAction{``1,``2})">
            <summary>
            Wraps the ref ref action into another delegate that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="action">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="action" /> by dropping the first argument
            return null if action is null.
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefFunc{``1,``2})">
            <summary>
            Wraps the ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return null if func is null
            </returns>
        </member>
        <member name="M:Microsoft.QualityTools.Testing.Fakes.FakesExtensions.Uncurrify``4(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefFunc{``1,``2,``3})">
            <summary>
            Wraps the ref func into another out func that drops the first argumet
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="TResult"></typeparam>
            <typeparam name="TRef1"></typeparam>
            <typeparam name="TRef2"></typeparam>
            <param name="func">the delegate to uncurryfy</param>
            <returns>a delegate that invokes <paramref name="func" /> by dropping the first argument;
            return null if func is null
            </returns>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates">
            <summary>
            A repository of stub delegate signatures.
            </summary>
            <remarks>
            The stub framework currently only supports
            the method signature covered by the delegate nested in <see cref="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates"/>.
            This includes methods with up to 10 parameter with or without return value,
            with or without a out/ref parameter as the last parameter.
            Pointers are not supported.
            </remarks>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action">
            <summary>
            An action that takes 1 argument
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action`1">
            <summary>
            An action that takes 1 argument
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action`2">
            <summary>
            An action that takes 2 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action`3">
            <summary>
            An action that takes 3 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action`4">
            <summary>
            An action that takes 4 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action`5">
            <summary>
            An action that takes 5 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action`6">
            <summary>
            An action that takes 6 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action`7">
            <summary>
            An action that takes 7 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action`8">
            <summary>
            An action that takes 8 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action`9">
            <summary>
            An action that takes 9 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action`10">
            <summary>
            An action that takes 10 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action`11">
            <summary>
            An action that takes 11 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action`12">
            <summary>
            An action that takes 12 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action`13">
            <summary>
            An action that takes 13 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action`14">
            <summary>
            An action that takes 14 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action`15">
            <summary>
            An action that takes 15 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action`16">
            <summary>
            An action that takes 16 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action`17">
            <summary>
            An action that takes 17 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action`18">
            <summary>
            An action that takes 18 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action`19">
            <summary>
            An action that takes 19 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutAction`1">
            <summary>
            An action that takes one out argument
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutAction`2">
            <summary>
            An action that takes two out argument
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutAction`2">
            <summary>
            An aciont that takes one out argument
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutAction`3">
            <summary>
            An action that takes two out arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutAction`3">
            <summary>
            An action with a out parameter that takes 2 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutAction`4">
            <summary>
            An action with two out parameters that takes 2 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutAction`4">
            <summary>
            An action with a out parameter that takes 3 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutAction`5">
            <summary>
            An action with two out parameters that takes 3 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutAction`5">
            <summary>
            An action with a out parameter that takes 4 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutAction`6">
            <summary>
            An action with two out parameters that takes 4 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutAction`6">
            <summary>
            An action with a out parameter that takes 5 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutAction`7">
            <summary>
            An action with two out parameters that takes 5 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutAction`7">
            <summary>
            An action with a out parameter that takes 6 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutAction`8">
            <summary>
            An action with two out parameters that takes 6 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutAction`8">
            <summary>
            An action with a out parameter that takes 7 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutAction`9">
            <summary>
            An action with two out parameters that takes 7 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutAction`9">
            <summary>
            An action with a out parameter that takes 8 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutAction`10">
            <summary>
            An action with two out parameters that takes 8 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutAction`10">
            <summary>
            An action with a out parameter that takes 9 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutAction`11">
            <summary>
            An action with two out parameters that takes 9 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutAction`11">
            <summary>
            An action with a out parameter that takes 10 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutAction`12">
            <summary>
            An action with two out parameters that takes 10 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutAction`12">
            <summary>
            An action with a out parameter that takes 11 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutAction`13">
            <summary>
            An action with two out parameters that takes 11 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutAction`13">
            <summary>
            An action with a out parameter that takes 12 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutAction`14">
            <summary>
            An action with two out parameters that takes 12 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutAction`14">
            <summary>
            An action with a out parameter that takes 13 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutAction`15">
            <summary>
            An action with two out parameters that takes 13 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutAction`15">
            <summary>
            An action with a out parameter that takes 14 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutAction`16">
            <summary>
            An action with two out parameters that takes 14 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutAction`16">
            <summary>
            An action with a out parameter that takes 15 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutAction`17">
            <summary>
            An action with two out parameters that takes 15 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutAction`17">
            <summary>
            An action with a out parameter that takes 16 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutAction`18">
            <summary>
            An action with two out parameters that takes 16 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutAction`18">
            <summary>
            An action with a out parameter that takes 17 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutAction`19">
            <summary>
            An action with two out parameters that takes 17 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutAction`19">
            <summary>
            An action with a out parameter that takes 18 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutAction`20">
            <summary>
            An action with two out parameters that takes 18 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutAction`20">
            <summary>
            An action with a out parameter that takes 19 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutAction`21">
            <summary>
            An action with two out parameters that takes 19 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction`1">
            <summary>
            An action with a ref parameter  that takes no argument
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefAction`2">
            <summary>
            An action with two ref parameters that takes no argument
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction`2">
            <summary>
            An action with a ref parameter  that takes 1 argument
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefAction`3">
            <summary>
            An action with two ref parameters that takes 1 argument
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction`3">
            <summary>
            An action with a ref parameter that takes 2 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefAction`4">
            <summary>
            An action with two ref parameters that takes 2 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction`4">
            <summary>
            An action with a ref parameter that takes 3 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefAction`5">
            <summary>
            An action with two ref parameters that takes 3 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction`5">
            <summary>
            An action with a ref parameter that takes 4 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefAction`6">
            <summary>
            An action with two ref parameters that takes 4 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction`6">
            <summary>
            An action with a ref parameter that takes 5 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefAction`7">
            <summary>
            An action with two ref parameters that takes 5 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction`7">
            <summary>
            An action with a ref parameter that takes 6 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefAction`8">
            <summary>
            An action with two ref parameters that takes 6 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction`8">
            <summary>
            An action with a ref parameter that takes 7 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefAction`9">
            <summary>
            An action with two ref parameters that takes 7 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction`9">
            <summary>
            An action with a ref parameter that takes 8 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefAction`10">
            <summary>
            An action with two ref parameters that takes 8 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction`10">
            <summary>
            An action with a ref parameter that takes 9 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefAction`11">
            <summary>
            An action with two ref parameters that takes 9 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction`11">
            <summary>
            An action with a ref parameter that takes 10 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefAction`12">
            <summary>
            An action with two ref parameters that takes 10 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction`12">
            <summary>
            An action with a ref parameter that takes 11 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefAction`13">
            <summary>
            An action with two ref parameters that takes 11 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction`13">
            <summary>
            An action with a ref parameter that takes 12 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefAction`14">
            <summary>
            An action with two ref parameters that takes 12 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction`14">
            <summary>
            An action with a ref parameter that takes 13 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefAction`15">
            <summary>
            An action with two ref parameters that takes 13 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction`15">
            <summary>
            An action with a ref parameter that takes 14 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefAction`16">
            <summary>
            An action with two ref parameters that takes 14 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction`16">
            <summary>
            An action with a ref parameter that takes 15 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefAction`17">
            <summary>
            An action with two ref parameters that takes 15 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction`17">
            <summary>
            An action with a ref parameter that takes 16 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefAction`18">
            <summary>
            An action with two ref parameters that takes 16 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction`18">
            <summary>
            An action with a ref parameter that takes 17 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefAction`19">
            <summary>
            An action with two ref parameters that takes 17 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction`19">
            <summary>
            An action with a ref parameter that takes 18 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefAction`20">
            <summary>
            An action with two ref parameters that takes 18 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefAction`20">
            <summary>
            An action with a ref parameter that takes 19 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefAction`21">
            <summary>
            An action with two ref parameters that takes 19 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func`1">
            <summary>
            An Function that takes no arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func`2">
            <summary>
            An Function that takes 1 argument
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func`3">
            <summary>
            A function that takes 2 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func`4">
            <summary>
            A function that takes 3 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func`5">
            <summary>
            A function that takes 4 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func`6">
            <summary>
            A function that takes 5 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func`7">
            <summary>
            A function that takes 6 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func`8">
            <summary>
            A function that takes 7 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func`9">
            <summary>
            A function that takes 8 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func`10">
            <summary>
            A function that takes 9 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func`11">
            <summary>
            A function that takes 10 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func`12">
            <summary>
            A function that takes 11 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func`13">
            <summary>
            A function that takes 12 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func`14">
            <summary>
            A function that takes 13 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func`15">
            <summary>
            A function that takes 14 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func`16">
            <summary>
            A function that takes 15 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func`17">
            <summary>
            A function that takes 16 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func`18">
            <summary>
            A function that takes 17 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func`19">
            <summary>
            A function that takes 18 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func`20">
            <summary>
            A function that takes 19 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc`2">
            <summary>
            An OutFunction that takes no arguments and 1 out argument
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutFunc`3">
            <summary>
            An OutFunction that takes no arguments and two out arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc`3">
            <summary>
            An OutFunction that takes 1 argument
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutFunc`4">
            <summary>
            An OutFunction that takes two out arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc`4">
            <summary>
            A function with an out parameter that takes 2 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutFunc`5">
            <summary>
            A function with an out parameter that takes 2 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc`5">
            <summary>
            A function with an out parameter that takes 3 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutFunc`6">
            <summary>
            A function with an out parameter that takes 3 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc`6">
            <summary>
            A function with an out parameter that takes 4 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutFunc`7">
            <summary>
            A function with an out parameter that takes 4 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc`7">
            <summary>
            A function with an out parameter that takes 5 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutFunc`8">
            <summary>
            A function with an out parameter that takes 5 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc`8">
            <summary>
            A function with an out parameter that takes 6 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutFunc`9">
            <summary>
            A function with an out parameter that takes 6 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc`9">
            <summary>
            A function with an out parameter that takes 7 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutFunc`10">
            <summary>
            A function with an out parameter that takes 7 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc`10">
            <summary>
            A function with an out parameter that takes 8 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutFunc`11">
            <summary>
            A function with an out parameter that takes 8 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc`11">
            <summary>
            A function with an out parameter that takes 9 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutFunc`12">
            <summary>
            A function with an out parameter that takes 9 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc`12">
            <summary>
            A function with an out parameter that takes 10 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutFunc`13">
            <summary>
            A function with an out parameter that takes 10 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc`13">
            <summary>
            A function with an out parameter that takes 11 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutFunc`14">
            <summary>
            A function with an out parameter that takes 11 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc`14">
            <summary>
            A function with an out parameter that takes 12 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutFunc`15">
            <summary>
            A function with an out parameter that takes 12 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc`15">
            <summary>
            A function with an out parameter that takes 13 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutFunc`16">
            <summary>
            A function with an out parameter that takes 13 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc`16">
            <summary>
            A function with an out parameter that takes 14 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutFunc`17">
            <summary>
            A function with an out parameter that takes 14 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc`17">
            <summary>
            A function with an out parameter that takes 15 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutFunc`18">
            <summary>
            A function with an out parameter that takes 15 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc`18">
            <summary>
            A function with an out parameter that takes 16 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutFunc`19">
            <summary>
            A function with an out parameter that takes 16 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc`19">
            <summary>
            A function with an out parameter that takes 17 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutFunc`20">
            <summary>
            A function with an out parameter that takes 17 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc`20">
            <summary>
            A function with an out parameter that takes 18 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutFunc`21">
            <summary>
            A function with an out parameter that takes 18 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc`21">
            <summary>
            A function with an out parameter that takes 19 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutOutFunc`22">
            <summary>
            A function with an out parameter that takes 19 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefFunc`2">
            <summary>
            An function with a ref parameter that takes no argument
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefFunc`3">
            <summary>
            An function with two ref parameters that takes no argument
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefFunc`3">
            <summary>
            An function with a ref parameter that takes 1 argument
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefFunc`4">
            <summary>
            An function with two ref parameters that takes one argument
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefFunc`4">
            <summary>
            A function with a ref parameter that takes 2 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefFunc`5">
            <summary>
            A function with two ref parameters that takes 2 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefFunc`5">
            <summary>
            A function with a ref parameter that takes 3 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefFunc`6">
            <summary>
            A function with two ref parameters that takes 3 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefFunc`6">
            <summary>
            A function with a ref parameter that takes 4 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefFunc`7">
            <summary>
            A function with two ref parameters that takes 4 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefFunc`7">
            <summary>
            A function with a ref parameter that takes 5 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefFunc`8">
            <summary>
            A function with two ref parameters that takes 5 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefFunc`8">
            <summary>
            A function with a ref parameter that takes 6 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefFunc`9">
            <summary>
            A function with two ref parameters that takes 6 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefFunc`9">
            <summary>
            A function with a ref parameter that takes 7 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefFunc`10">
            <summary>
            A function with two ref parameters that takes 7 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefFunc`10">
            <summary>
            A function with a ref parameter that takes 8 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefFunc`11">
            <summary>
            A function with two ref parameters that takes 8 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefFunc`11">
            <summary>
            A function with a ref parameter that takes 9 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefFunc`12">
            <summary>
            A function with two ref parameters that takes 9 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefFunc`12">
            <summary>
            A function with a ref parameter that takes 10 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefFunc`13">
            <summary>
            A function with two ref parameters that takes 10 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefFunc`13">
            <summary>
            A function with a ref parameter that takes 11 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefFunc`14">
            <summary>
            A function with two ref parameters that takes 11 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefFunc`14">
            <summary>
            A function with a ref parameter that takes 12 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefFunc`15">
            <summary>
            A function with two ref parameters that takes 12 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefFunc`15">
            <summary>
            A function with a ref parameter that takes 13 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefFunc`16">
            <summary>
            A function with two ref parameters that takes 13 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefFunc`16">
            <summary>
            A function with a ref parameter that takes 14 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefFunc`17">
            <summary>
            A function with two ref parameters that takes 14 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefFunc`17">
            <summary>
            A function with a ref parameter that takes 15 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefFunc`18">
            <summary>
            A function with two ref parameters that takes 15 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefFunc`18">
            <summary>
            A function with a ref parameter that takes 16 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefFunc`19">
            <summary>
            A function with two ref parameters that takes 16 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefFunc`19">
            <summary>
            A function with a ref parameter that takes 17 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefFunc`20">
            <summary>
            A function with two ref parameters that takes 17 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefFunc`20">
            <summary>
            A function with a ref parameter that takes 18 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefFunc`21">
            <summary>
            A function with two ref parameters that takes 18 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefFunc`21">
            <summary>
            A function with a ref parameter that takes 19 arguments
            </summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.FakesDelegates.RefRefFunc`22">
            <summary>
            A function with two ref parameters that takes 19 arguments
            </summary>
        </member>
        <member name="M:System.Diagnostics.Contracts.ReflectionContract.TryGetIsInterface(System.Type,System.Boolean@)">
            <summary>
            Tries to check if a type is an interface.
            </summary>
        </member>
        <member name="M:System.Diagnostics.Contracts.ReflectionContract.TryGetIsClass(System.Type,System.Boolean@)">
            <summary>
            Tries to check if a type is a class.
            </summary>
        </member>
        <member name="M:System.Diagnostics.Contracts.ReflectionContract.TryGetIsValueType(System.Type,System.Boolean@)">
            <summary>
            Tries to check if a type is a value type.
            </summary>
        </member>
        <member name="M:System.Diagnostics.Contracts.ReflectionContract.IsGenericType(System.Type)">
            <summary>
            Determines whether the specified type is Generic.
            </summary>
        </member>
        <member name="M:System.Diagnostics.Contracts.ReflectionContract.TryGetIsGenericType(System.Type,System.Boolean@)">
            <summary>
            Tries to check if a type is a generic type.
            </summary>
        </member>
        <member name="M:System.Diagnostics.Contracts.ReflectionContract.TryGetIsGenericTypeDefinition(System.Type,System.Boolean@)">
            <summary>
            Tries to check if a type is generic type definition.
            </summary>
        </member>
        <member name="M:System.Diagnostics.Contracts.ReflectionContract.IsGenericTypeDefinition(System.Type)">
            <summary>
            Determines whether the specified type is generic type definition.
            </summary>
        </member>
        <member name="M:System.Diagnostics.Contracts.ReflectionContract.TryGetContainsGenericParameters(System.Type,System.Boolean@)">
            <summary>
            Tries to check if a type contains generic parameters.
            </summary>
        </member>
        <member name="M:System.Diagnostics.Contracts.ReflectionContract.ContainsGenericParameters(System.Type)">
            <summary>
            Determines whether the specified type contains generic parameters.
            </summary>
        </member>
        <member name="M:System.Diagnostics.Contracts.ReflectionContract.IsClassOrValueType(System.Type)">
            <summary>
            Checks whether the given type represents a (possibly partially instantiated) class or value type;
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:System.Diagnostics.Contracts.ReflectionContract.IsInterface(System.Type)">
            <summary>
            Checks if a type is an interface
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:System.Diagnostics.Contracts.ReflectionContract.IsClassOrInterface(System.Type)">
            <summary>
            Checks whether the given type represents a (possibly partially instantiated) class or an interface;
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:System.Diagnostics.Contracts.ReflectionContract.IsClassOrInterfaceOrValueType(System.Type)">
            <summary>
            Checks whether the given type represents a (possibly partially instantiated) class, interface or value type;
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:System.Diagnostics.Contracts.ReflectionContract.IsTypeDefinition(System.Type)">
            <summary>
            Checks whether the given type represents a type definition.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:System.Diagnostics.Contracts.ReflectionContract.IsDelegate(System.Type)">
            <summary>
            Checks that a type is a delegate type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:__InstrumentAttribute">
            <summary>
            Types marked by an attribute of this type or assembly will be instrumented.
            </summary>
            <remarks>
            Note that the unmanaged profiler does not care where this attribute is defined; it simply looks for an attribute 
            which has the name __InstrumentAttribute.
            </remarks>
        </member>
        <member name="T:__DoNotInstrumentAttribute">
            <summary>
            Types  marked by an attribute of this type will not be
            instrumented.
            </summary>
            <remarks>
            Note that the unmanaged profiler does not care where this attribute is defined; it simply looks for an attribute 
            which has the name __DoNotInstrumentAttribute.
            </remarks>
        </member>
    </members>
</doc>
